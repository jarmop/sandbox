{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["run","code","oldFrame","document","querySelector","remove","frame","createElement","id","style","body","appendChild","win","contentWindow","console","log","msg","write","result","output","errorMessage","eval","innerText","error","name","message","errorPosition","stack","positionString","split","filter","indexOf","shift","match","pop","line","column","parseErrorPositionFromStack","initialCode","KEY_CODE_CMD","KEY_CODE_R","App","useState","setCode","setResult","cmdDown","setCmdDown","runCode","className","onClick","title","value","onValueChange","highlight","Prism","languages","js","padding","onKeyDown","event","keyCode","preventDefault","onKeyUp","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAmBA,IAAMA,EAAM,SAACC,GACX,IAAMC,EAAWC,SAASC,cAAc,YACpCF,GACFA,EAASG,SAEX,IAAMC,EAAQH,SAASI,cAAc,UACrCD,EAAME,GAAK,UACXF,EAAMG,MAAQ,gBACdN,SAASO,KAAKC,YAAYL,GAC1B,IAAMM,EAAMN,EAAMO,cAClBD,EAAIE,QAAQC,IAAM,SAACC,GAAD,OAASJ,EAAIT,SAASc,MAAMD,IAC9C,IAAIE,EAAS,CAACC,OAAQ,KAAMC,aAAc,MAC1C,IACER,EAAIS,KAAKpB,GACTiB,EAAOC,OAASP,EAAIT,SAASC,cAAc,QAAQkB,UACnD,MAAOC,GACP,IAAIH,EAAeG,EAAMC,KAAO,KAAOD,EAAME,QACvCC,EA5BV,SAAqCC,GACnC,IACMC,EAAiBD,EAAME,MAAM,MAC9BC,QAAO,SAAAd,GAAG,OAA6B,IAAzBA,EAAIe,QAAQ,WAAgBC,QAAQC,MAFpC,+BAGnB,IAAKL,EACH,OAAO,KALiC,MAOnBA,EAAeM,MAAML,MAAM,KAPR,mBAQ1C,MAAO,CAACM,KARkC,KAQ5BC,OAR4B,MA4BlBC,CAA4Bd,EAAMI,OACpDD,IACFN,GAAgB,WAAaM,EAAcS,KAAO,aAAeT,EAAcU,OAAS,KAE1FlB,EAAOE,aAAeA,EAGxB,OAAOF,GAGHoB,EAAW,0DAIXC,EAAe,GACfC,EAAa,GA8CJC,MA5Cf,WAAgB,IAAD,EACWC,mBAASJ,GADpB,mBACNrC,EADM,KACA0C,EADA,OAEeD,mBAAS,IAFxB,mBAENxB,EAFM,KAEE0B,EAFF,OAGiBF,oBAAS,GAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAKPC,EAAU,SAAC9C,GACf,IAAMiB,EAASlB,EAAIC,GACnB2C,EAAU1B,IAGZ,OACI,yBAAK8B,UAAU,OACb,6BACE,4BAAQC,QAAS,kBAAMF,EAAQ9C,IAAOiD,MAAO,mCAA7C,aAEF,kBAAC,IAAD,CACEC,MAAOlD,EACPmD,cAAeT,EACfU,UAAW,SAAApD,GAAI,OAAIqD,IAAMD,UAAUpD,EAAMqD,IAAMC,UAAUC,KACzDR,UAAU,SACVS,QAAS,GACTC,UAAW,SAAAC,GACLd,EACEc,EAAMC,UAAYpB,IACpBmB,EAAME,iBACNd,EAAQ9C,IAED0D,EAAMC,UAAYrB,GAC3BO,GAAW,IAGfgB,QAAS,SAAAH,GACHA,EAAMC,UAAYrB,GACpBO,GAAW,MAIjB,yBAAKtC,GAAG,SAASwC,UAAW,UAAY9B,EAAOE,aAAe,SAAW,KACtEF,EAAOE,aAAeF,EAAOE,aAAeF,EAAOC,UC/E1C4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2DCZNkC,IAASC,OAAO,kBAAC,EAAD,MAASjE,SAASkE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2b707d8a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Editor from 'react-simple-code-editor';\nimport Prism from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/themes/prism.css';\nimport './App.css';\n\nfunction parseErrorPositionFromStack(stack) {\n  const expression = /(?<=anonymous>:)(.*)(?=\\))/g;\n  const positionString = stack.split('\\n')\n      .filter(msg => msg.indexOf('eval') !== -1).shift().match(expression);\n  if (!positionString) {\n    return null;\n  }\n  const [line, column] = positionString.pop().split(':');\n  return {line, column};\n}\n\nconst run = (code) => {\n  const oldFrame = document.querySelector('#sandbox');\n  if (oldFrame) {\n    oldFrame.remove();\n  }\n  const frame = document.createElement('iframe');\n  frame.id = 'sandbox';\n  frame.style = 'display: none';\n  document.body.appendChild(frame);\n  const win = frame.contentWindow;\n  win.console.log = (msg) => win.document.write(msg);\n  let result = {output: null, errorMessage: null};\n  try {\n    win.eval(code);\n    result.output = win.document.querySelector('body').innerText;\n  } catch (error) {\n    let errorMessage = error.name + ': ' + error.message;\n    const errorPosition = parseErrorPositionFromStack(error.stack);\n    if (errorPosition) {\n      errorMessage += ' (line: ' + errorPosition.line + ', column: ' + errorPosition.column + ')'\n    }\n    result.errorMessage = errorMessage;\n  }\n\n  return result;\n};\n\nconst initialCode = `for (let i = 0; i < 5; i++) {\n    console.log('a');\n}`;\n\nconst KEY_CODE_CMD = 91;\nconst KEY_CODE_R = 82;\n\nfunction App() {\n  const [code, setCode] = useState(initialCode);\n  const [result, setResult] = useState({});\n  const [cmdDown, setCmdDown] = useState(false);\n\n  const runCode = (code) => {\n    const result = run(code);\n    setResult(result);\n  };\n\n  return (\n      <div className=\"app\">\n        <div>\n          <button onClick={() => runCode(code)} title={\"CMD + R (while focus on editor)\"}>Run code</button>\n        </div>\n        <Editor\n          value={code}\n          onValueChange={setCode}\n          highlight={code => Prism.highlight(code, Prism.languages.js)}\n          className=\"editor\"\n          padding={10}\n          onKeyDown={event => {\n            if (cmdDown) {\n              if (event.keyCode === KEY_CODE_R) {\n                event.preventDefault();\n                runCode(code);\n              }\n            } else if (event.keyCode === KEY_CODE_CMD) {\n              setCmdDown(true);\n            }\n          }}\n          onKeyUp={event => {\n            if (event.keyCode === KEY_CODE_CMD) {\n              setCmdDown(false);\n            }\n          }}\n        />\n        <div id=\"output\" className={'output' + (result.errorMessage ? ' error' : '')}>\n          {result.errorMessage ? result.errorMessage : result.output}\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}